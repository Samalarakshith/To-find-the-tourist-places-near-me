# -*- coding: utf-8 -*-
"""tourist_places.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fGqWg439g3uoQp3mm8XtZC-IUsawn7r5
"""

pip install folium geopy

import folium
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import math

# List of some tourist places in Telangana with their coordinates
tourist_places = [
    {"name": "Charminar", "coords": (17.3616, 78.4747)},
    {"name": "Golconda Fort", "coords": (17.3833, 78.4011)},
    {"name": "Ramoji Film City", "coords": (17.2543, 78.6808)},
    {"name": "Warangal Fort", "coords": (17.9784, 79.5941)},
    {"name": "Kakatiya Kala Thoranam", "coords": (17.9756, 79.6038)},
    {"name": "Thousand Pillar Temple", "coords": (17.9751, 79.6124)},
    {"name": "Hussain Sagar Lake", "coords": (17.4239, 78.4738)},
    {"name": "Chilkur Balaji Temple", "coords": (17.3583, 78.3219)},
    {"name": "Nehru Zoological Park", "coords": (17.3489, 78.4384)},
    {"name": "Birla Mandir", "coords": (17.4062, 78.4691)},
    {"name": "Shilparamam", "coords": (17.4504, 78.3806)},
    {"name": "Qutb Shahi Tombs", "coords": (17.3958, 78.4042)},
    {"name": "Surendrapuri", "coords": (17.6581, 78.9347)},
    {"name": "Bhadrakali Temple", "coords": (17.9927, 79.5886)},
    {"name": "Kuntala Waterfalls", "coords": (19.2085, 78.4734)},
    {"name": "Bogatha Waterfalls", "coords": (18.1323, 80.0826)},
    {"name": "Medak Cathedral", "coords": (18.0456, 78.2608)},
    {"name": "Ramappa Temple", "coords": (18.2447, 79.9025)},
    {"name": "Pakhal Lake", "coords": (17.9100, 79.8601)},
    {"name": "Ethipothala Waterfalls", "coords": (16.5550, 79.3069)},
    {"name": "Ananthagiri Hills", "coords": (17.3077, 77.8826)},
    {"name": "Pocharam Wildlife Sanctuary", "coords": (18.1837, 78.2933)},
    {"name": "Yadadri Temple", "coords": (17.5987, 78.9433)},
    {"name": "Laknavaram Lake", "coords": (18.1608, 80.0781)},
    {"name": "Koil Sagar Dam", "coords": (16.1965, 77.9444)},
    {"name": "Alampur Jogulamba Temple", "coords": (15.8766, 78.1348)},
    {"name": "Basar Saraswathi Temple", "coords": (18.8772, 78.1108)},
    {"name": "Khilla Ghanpur Fort", "coords": (16.4789, 78.0675)},
    {"name": "Kawal Wildlife Sanctuary", "coords": (19.1167, 78.8000)},
    {"name": "Jurala Project", "coords": (16.6328, 77.8096)},
    {"name": "Manthani Temple", "coords": (18.6503, 79.6663)},
    {"name": "Jalavihar Water Park", "coords": (17.4356, 78.4732)},
    {"name": "Mahabubnagar Pillalamarri Banyan Tree", "coords": (16.7388, 78.0026)},
    {"name": "Nelakondapalli Buddhist Stupa", "coords": (17.1953, 80.1308)},
    {"name": "Nagunur Fort", "coords": (18.4428, 79.1289)},
    {"name": "Domakonda Fort", "coords": (18.2796, 78.4341)},
    {"name": "Jagtial Fort", "coords": (18.8006, 78.9368)},
    {"name": "Sammakka Saralamma Temple", "coords": (18.1256, 80.1448)},
    {"name": "Parnasala", "coords": (17.9689, 81.3040)},
    {"name": "Sri Raja Rajeshwara Temple", "coords": (18.4360, 79.1286)},
    {"name": "Keesaragutta Temple", "coords": (17.5000, 78.6200)},
    {"name": "Bhadrachalam Temple", "coords": (17.6685, 80.8891)},
    {"name": "Nizam Sagar Dam", "coords": (18.1658, 78.0997)},
    {"name": "Singur Dam", "coords": (17.7173, 78.0039)},
    {"name": "Pillalamarri", "coords": (16.7388, 78.0026)},
    {"name": "Pochera Waterfalls", "coords": (19.3886, 78.6754)},
    {"name": "Adilabad Kala Ashram", "coords": (19.6750, 78.5338)},
    {"name": "Vemulawada Temple", "coords": (18.4380, 78.9245)},
    {"name": "Mallur Lakshmi Narasimha Temple", "coords": (17.6667, 80.6333)},
    {"name": "Kadam Dam", "coords": (19.1213, 78.7707)},
    {"name": "Kanakai Waterfalls", "coords": (19.2085, 78.4734)},
    {"name": "Jagannath Temple Hyderabad", "coords": (17.4328, 78.4674)},
    {"name": "Dharmapuri Narasimha Temple", "coords": (18.8982, 79.1281)},
    {"name": "Chandraghad Fort", "coords": (18.0530, 79.2704)},
    {"name": "Bhongir Fort", "coords": (17.5122, 78.8920)},
    {"name": "Mallela Theertham Waterfalls", "coords": (16.3664, 78.7943)},
    {"name": "Eturnagaram Wildlife Sanctuary", "coords": (18.3786, 80.0521)},
    {"name": "Koilkonda Fort", "coords": (16.6639, 77.9651)},
    {"name": "Pangal Fort", "coords": (16.7504, 78.1614)},
    {"name": "Mahabubnagar Tank Bund", "coords": (16.7365, 78.0082)},
    {"name": "Macherla Chennakesava Temple", "coords": (16.4807, 79.4360)},
    {"name": "Kaleshwaram Temple", "coords": (18.8112, 79.9072)},
    {"name": "Suraj Kund", "coords": (18.9782, 79.5805)},
]

def get_coordinates(location_name):
    """Get coordinates of a location using Geopy."""
    geolocator = Nominatim(user_agent="tourist_places_locator")
    location = geolocator.geocode(location_name)
    if location:
        return (location.latitude, location.longitude)
    else:
        print(f"Error: Location '{location_name}' not found.")
        return None

def calculate_bearing(start, end):
    """Calculate the compass bearing between two points."""
    start_lat, start_lon = math.radians(start[0]), math.radians(start[1])
    end_lat, end_lon = math.radians(end[0]), math.radians(end[1])
    delta_lon = end_lon - start_lon

    x = math.sin(delta_lon) * math.cos(end_lat)
    y = math.cos(start_lat) * math.sin(end_lat) - math.sin(start_lat) * math.cos(end_lat) * math.cos(delta_lon)
    initial_bearing = math.atan2(x, y)
    initial_bearing = math.degrees(initial_bearing)
    compass_bearing = (initial_bearing + 360) % 360
    return compass_bearing

def get_direction(bearing):
    """Convert bearing into a human-readable compass direction."""
    directions = ["North", "North-East", "East", "South-East", "South", "South-West", "West", "North-West"]
    index = round(bearing / 45) % 8
    return directions[index]

def find_nearest_places(user_coords):
    """Find nearest tourist places to the given coordinates within 50 km."""
    places_info = []
    for place in tourist_places:
        distance = geodesic(user_coords, place["coords"]).kilometers
        if distance <= 50:  # Filter only places within 50 km
            bearing = calculate_bearing(user_coords, place["coords"])
            direction = get_direction(bearing)
            places_info.append({"name": place["name"], "distance": distance, "direction": direction, "coords": place["coords"]})
    return sorted(places_info, key=lambda x: x["distance"])  # Sort by distance

def display_map(user_coords, nearest_places):
    """Display a map with the user's location and nearby tourist places."""
    user_map = folium.Map(location=user_coords, zoom_start=10)

    # Add user's location marker
    folium.Marker(user_coords, popup="Your Location", icon=folium.Icon(color="blue")).add_to(user_map)

    # Add markers for tourist places
    for place in nearest_places:
        folium.Marker(
            place["coords"],
            popup=f"{place['name']} ({place['distance']:.2f} km, {place['direction']})",
            icon=folium.Icon(color="green"),
        ).add_to(user_map)

    # Save the map to an HTML file
    user_map.save("tourist_places_below_50km_map.html")
    print("Map with tourist places saved as 'tourist_places_below_50km_map.html'.")

def main():
    print("Telangana Tourist Places Finder ")
    print("---------------------------------------------")

    # Input user location
    user_location = input("Enter your current location ")
    user_coords = get_coordinates(user_location)

    if user_coords:
        # Find nearest tourist places within 50 km
        nearest_places = find_nearest_places(user_coords)

        if nearest_places:
            print("\nTourist Places Within 50 km:")
            for place in nearest_places:
                print(f"- {place['name']}: {place['distance']:.2f} km, {place['direction']}")

            # Display map
            display_map(user_coords, nearest_places)
        else:
            print("No tourist places found within 50 km.")
    else:
        print("Error: Could not determine your location.")

if __name__ == "__main__":
    main()